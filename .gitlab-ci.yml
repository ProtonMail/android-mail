default:
  image: $CI_REGISTRY/android/shared/docker-android:v1.1.0

before_script:
  - export JAVA_TOOL_OPTIONS="-Dhttp.proxyHost=$( echo ${http_proxy##http://} | cut -d':' -f1 ) -Dhttp.proxyPort=$( echo ${http_proxy##http://} | cut -d':' -f2 ) -Dhttps.proxyHost=$( echo ${https_proxy##http://} | cut -d':' -f1 ) -Dhttps.proxyPort=$( echo ${https_proxy##http://} | cut -d':' -f2 ) -Dhttp.nonProxyHosts=\"$( echo $no_proxy | tr ',' '|' )\""
variables:
  # Use fastzip to improve cache times
  FF_USE_FASTZIP: "true"
  # Output upload and download progress every 5 seconds
  TRANSFER_METER_FREQUENCY: "5s"
  # Use no compression for artifacts
  ARTIFACT_COMPRESSION_LEVEL: "fastest"
  # Use low compression for caches
  CACHE_COMPRESSION_LEVEL: "fast"

# Makes sure we do not create separate merge request and branch pipelines.
# See https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH == "master"

stages:
  - setup
  - analyse
  - danger-review
  - localise
  - build
  - startReview
  - test
  - report
  - deploy
  - stopReview

setup:
  stage: setup
  extends: .base_job
  tags:
    - small
  before_script:
    - !reference [ .ruby, before_script ]
  script:
    - mkdir app/src/uiTest/assets -p
    - mkdir keystore -p
    - base64 -d - < "$TEST_USERS_CREDENTIALS_FILE" > app/src/uiTest/assets/users.json
    - base64 -d - < "$INTERNAL_API_FILE" > app/src/uiTest/assets/internal_api.json
    - base64 -d - < "$PRIVATE_PROPERTIES_FILE" > private.properties
    - bundle exec fastlane setupUiTestsAssets

analyse:
  stage: analyse
  extends: .base_job
  tags:
    - medium
  script:
    - bundle exec fastlane analyse
  artifacts:
    expire_in: 1 month
    reports:
      codequality: config/detekt/reports/mergedReport.json

danger-review:
  stage: danger-review
  tags:
    - small
  when: always
  script:
    - bundle exec danger --fail-on-errors=false
  allow_failure: true
  variables:
    DANGER_GITLAB_API_TOKEN: $DANGER_GITLAB_API_TOKEN
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

localise-sync-crowdin:
  stage: localise
  variables:
    I18N_FILTER_OUT_ITEMS: 'proton-libs'
    I18N_SYNC_CROWDIN_PROJECT: 'android-mail-new'
    I18N_SYNC_BRANCH: 'master'
  extends: .i18n-sync-crowdin-shared
  only:
    - master

localise-commit-locales:
  stage: localise
  variables:
    I18N_COMMIT_CROWDIN_PROJECT: 'android-mail-new'
    I18N_COMMIT_BRANCH_PUSH: 'master'
    I18N_COMMIT_BRANCH_ALLOWED: 'master'
  extends: .i18n-commit-locales-shared

build_dev_debug:
  extends: .build_job
  script:
    - echo PROXY_TOKEN="$(curl -o - https://proxy.proton.black/token/get)" >> private.properties
    - bundle exec fastlane assembleDevDebug
    - bundle exec fastlane assembleTest

build_prod_debug:
  extends: .build_job
  script:
    - bundle exec fastlane assembleProdDebug

build_alpha_release:
  extends: .build_job
  script:
    - base64 -d - < "$PROTON_RELEASE_KEYSTORE_BASE64" > keystore/ProtonMail.keystore
    - base64 -d - < "$SENTRY_PROPERTIES_FILE" > "sentry.properties"
    - bundle exec fastlane bumpAppVersion
    - bundle exec fastlane assembleAlphaRelease
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
      when: never

startReview:
  stage: startReview
  before_script:
    - export REVIEW_APP_ARTIFACT_PATH="app/build/outputs/apk/prod/debug/app-prod-debug.apk"
    - echo ${REVIEW_APP_ARTIFACT_PATH}
  extends: .startReview
  dependencies:
    - build_prod_debug
  only:
    - merge_requests

stopReview:
  stage: stopReview
  extends: .stopReview
  rules:
    # The cleanup is always manual on a Merge Request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
    # But it's not needed when not on a Merge Request
    - when: never

run_unit_test:
  stage: test
  extends: .base_job
  tags:
    - xlarge-k8s
  dependencies:
    - build_dev_debug
  script:
    - bundle exec fastlane unitTest

run_firebase_instrumentation_tests:
  extends: .firebase_test_job
  stage: test
  script:
    - bundle exec fastlane instrumentedTest

run_firebase_smoke_tests:
  extends: .firebase_test_job
  script:
    - bundle exec fastlane smokeTest
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $NIGHTLY_ALPHA_BUILD == "true"
      when: never
    - when: on_success

run_firebase_extended_smoke_tests:
  extends: .firebase_test_job
  script:
    - bundle exec fastlane smokeTestExtended
  rules:
    - if: $NIGHTLY_ALPHA_BUILD == "true"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"

run_firebase_full_regression_tests:
  extends: .firebase_test_job
  script:
    - bundle exec fastlane fullRegressionTest
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $NIGHTLY_ALPHA_BUILD == "true"

coverage report:
  stage: report
  extends: .base_job
  tags:
    - xlarge-k8s
  script:
    - bundle exec fastlane coverageReport
  coverage: /Total.*?(\d{1,3}\.\d{0,2})%/
  artifacts:
    expire_in: 1 week
    paths:
      - build/reports
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/reports/cobertura-coverage.xml

deploy_to_firebase_dev:
  extends: .firebase_deploy_job
  script:
    - bundle exec fastlane deployToFirebaseDevGroup
  rules:
    - !reference [ .firebase_deploy_job, rules ]
    - if: $NIGHTLY_ALPHA_BUILD == "true"
      when: never
    - if: $INTERNAL_ALPHA_RELEASE == "true"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"

deploy_to_firebase_nightly:
  extends: .firebase_deploy_job
  script:
    - bundle exec fastlane deployToFirebaseNightlyGroup
  rules:
    - !reference [ .firebase_deploy_job, rules ]
    - if: $NIGHTLY_ALPHA_BUILD == "true"

deploy_to_firebase_alpha:
  extends: .firebase_deploy_job
  script:
    - bundle exec fastlane deployToFirebaseInternalAlphaGroup
    - bundle exec fastlane tagRelease
  rules:
    - !reference [ .firebase_deploy_job, rules ]
    - if: $INTERNAL_ALPHA_RELEASE == "true"

include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'proton/mobile/android/proton-libs'
    ref: main
    file: '/ci/templates-shared/appetize-integration.yml'

  - local: '/ci/templates/ruby.gitlab-ci.yml'
  - local: '/ci/templates/base-jobs.gitlab-ci.yml'
